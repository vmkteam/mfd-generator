// Code generated by mfd-generator unknown; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"github.com/google/uuid"
	"time"
)

var Columns = struct {
	Category struct {
		ID, Title, OrderNumber, StatusID string
	}
	News struct {
		ID, Title, Preview, Content, CategoryID, CountryID, RegionID, CityID, TagIDs, CreatedAt, PublishedAt, StatusID string

		Category, Country, Region, City string
	}
	Tag struct {
		ID, Title, StatusID string
	}
	City struct {
		ID, RegionID, CountryID, Title, AltTitle, Alias, OrderNumber, StatusID string

		Region, Country string
	}
	Country struct {
		ID, Title, AltTitle, Alias, OrderNumber, H1, PageTitle, MetaDescription, StatusID string
	}
	Region struct {
		ID, CountryID, Title, AltTitle, Alias, OrderNumber, Image, H1, PageTitle, MetaDescription, StatusID string

		Country string
	}
	EncryptionKey struct {
		ID, IssuedCount, CreatedAt, UpdatedAt, ExpiresAt, StatusID string
	}
	VfsFile struct {
		ID, FolderID, Title, Path, Params, IsFavorite, MimeType, FileSize, FileExists, CreatedAt, StatusID string

		Folder string
	}
	VfsFolder struct {
		ID, ParentFolderID, Title, IsFavorite, CreatedAt, StatusID string

		ParentFolder string
	}
	LoginCode struct {
		ID, Code, CreatedAt, SiteUserID, Attempts string

		SiteUser string
	}
	SiteUser struct {
		ID, StatusID, Email, DefaultRole, Password, FirstName, LastName, OwnerExternalID, CreatedAt, LastActivityAt string
	}
}{
	Category: struct {
		ID, Title, OrderNumber, StatusID string
	}{
		ID:          "categoryId",
		Title:       "title",
		OrderNumber: "orderNumber",
		StatusID:    "statusId",
	},
	News: struct {
		ID, Title, Preview, Content, CategoryID, CountryID, RegionID, CityID, TagIDs, CreatedAt, PublishedAt, StatusID string

		Category, Country, Region, City string
	}{
		ID:          "newsId",
		Title:       "title",
		Preview:     "preview",
		Content:     "content",
		CategoryID:  "categoryId",
		CountryID:   "countryId",
		RegionID:    "regionId",
		CityID:      "cityId",
		TagIDs:      "tagIds",
		CreatedAt:   "createdAt",
		PublishedAt: "publishedAt",
		StatusID:    "statusId",

		Category: "Category",
		Country:  "Country",
		Region:   "Region",
		City:     "City",
	},
	Tag: struct {
		ID, Title, StatusID string
	}{
		ID:       "tagId",
		Title:    "title",
		StatusID: "statusId",
	},
	City: struct {
		ID, RegionID, CountryID, Title, AltTitle, Alias, OrderNumber, StatusID string

		Region, Country string
	}{
		ID:          "cityId",
		RegionID:    "regionId",
		CountryID:   "countryId",
		Title:       "title",
		AltTitle:    "altTitle",
		Alias:       "alias",
		OrderNumber: "orderNumber",
		StatusID:    "statusId",

		Region:  "Region",
		Country: "Country",
	},
	Country: struct {
		ID, Title, AltTitle, Alias, OrderNumber, H1, PageTitle, MetaDescription, StatusID string
	}{
		ID:              "countryId",
		Title:           "title",
		AltTitle:        "altTitle",
		Alias:           "alias",
		OrderNumber:     "orderNumber",
		H1:              "h1",
		PageTitle:       "pageTitle",
		MetaDescription: "metaDescription",
		StatusID:        "statusId",
	},
	Region: struct {
		ID, CountryID, Title, AltTitle, Alias, OrderNumber, Image, H1, PageTitle, MetaDescription, StatusID string

		Country string
	}{
		ID:              "regionId",
		CountryID:       "countryId",
		Title:           "title",
		AltTitle:        "altTitle",
		Alias:           "alias",
		OrderNumber:     "orderNumber",
		Image:           "image",
		H1:              "h1",
		PageTitle:       "pageTitle",
		MetaDescription: "metaDescription",
		StatusID:        "statusId",

		Country: "Country",
	},
	EncryptionKey: struct {
		ID, IssuedCount, CreatedAt, UpdatedAt, ExpiresAt, StatusID string
	}{
		ID:          "encryptionKeyId",
		IssuedCount: "issuedCount",
		CreatedAt:   "createdAt",
		UpdatedAt:   "updatedAt",
		ExpiresAt:   "expiresAt",
		StatusID:    "statusId",
	},
	VfsFile: struct {
		ID, FolderID, Title, Path, Params, IsFavorite, MimeType, FileSize, FileExists, CreatedAt, StatusID string

		Folder string
	}{
		ID:         "fileId",
		FolderID:   "folderId",
		Title:      "title",
		Path:       "path",
		Params:     "params",
		IsFavorite: "isFavorite",
		MimeType:   "mimeType",
		FileSize:   "fileSize",
		FileExists: "fileExists",
		CreatedAt:  "createdAt",
		StatusID:   "statusId",

		Folder: "Folder",
	},
	VfsFolder: struct {
		ID, ParentFolderID, Title, IsFavorite, CreatedAt, StatusID string

		ParentFolder string
	}{
		ID:             "folderId",
		ParentFolderID: "parentFolderId",
		Title:          "title",
		IsFavorite:     "isFavorite",
		CreatedAt:      "createdAt",
		StatusID:       "statusId",

		ParentFolder: "ParentFolder",
	},
	LoginCode: struct {
		ID, Code, CreatedAt, SiteUserID, Attempts string

		SiteUser string
	}{
		ID:         "state",
		Code:       "code",
		CreatedAt:  "createdAt",
		SiteUserID: "siteUserId",
		Attempts:   "attempts",

		SiteUser: "SiteUser",
	},
	SiteUser: struct {
		ID, StatusID, Email, DefaultRole, Password, FirstName, LastName, OwnerExternalID, CreatedAt, LastActivityAt string
	}{
		ID:              "siteUserId",
		StatusID:        "statusId",
		Email:           "email",
		DefaultRole:     "defaultRole",
		Password:        "password",
		FirstName:       "firstName",
		LastName:        "lastName",
		OwnerExternalID: "ownerExternalId",
		CreatedAt:       "createdAt",
		LastActivityAt:  "lastActivityAt",
	},
}

var Tables = struct {
	Category struct {
		Name, Alias string
	}
	News struct {
		Name, Alias string
	}
	Tag struct {
		Name, Alias string
	}
	City struct {
		Name, Alias string
	}
	Country struct {
		Name, Alias string
	}
	Region struct {
		Name, Alias string
	}
	EncryptionKey struct {
		Name, Alias string
	}
	VfsFile struct {
		Name, Alias string
	}
	VfsFolder struct {
		Name, Alias string
	}
	LoginCode struct {
		Name, Alias string
	}
	SiteUser struct {
		Name, Alias string
	}
}{
	Category: struct {
		Name, Alias string
	}{
		Name:  "categories",
		Alias: "t",
	},
	News: struct {
		Name, Alias string
	}{
		Name:  "news",
		Alias: "t",
	},
	Tag: struct {
		Name, Alias string
	}{
		Name:  "tags",
		Alias: "t",
	},
	City: struct {
		Name, Alias string
	}{
		Name:  "cities",
		Alias: "t",
	},
	Country: struct {
		Name, Alias string
	}{
		Name:  "countries",
		Alias: "t",
	},
	Region: struct {
		Name, Alias string
	}{
		Name:  "regions",
		Alias: "t",
	},
	EncryptionKey: struct {
		Name, Alias string
	}{
		Name:  "encryptionKeys",
		Alias: "t",
	},
	VfsFile: struct {
		Name, Alias string
	}{
		Name:  "vfsFiles",
		Alias: "t",
	},
	VfsFolder: struct {
		Name, Alias string
	}{
		Name:  "vfsFolders",
		Alias: "t",
	},
	LoginCode: struct {
		Name, Alias string
	}{
		Name:  "loginCodes",
		Alias: "t",
	},
	SiteUser: struct {
		Name, Alias string
	}{
		Name:  "siteUsers",
		Alias: "t",
	},
}

type Category struct {
	tableName struct{} `pg:"categories,alias:t,discard_unknown_columns"`

	ID          int    `pg:"categoryId,pk"`
	Title       string `pg:"title,use_zero"`
	OrderNumber int    `pg:"orderNumber,use_zero"`
	StatusID    int    `pg:"statusId,use_zero"`
}

type News struct {
	tableName struct{} `pg:"news,alias:t,discard_unknown_columns"`

	ID          int        `pg:"newsId,pk"`
	Title       string     `pg:"title,use_zero"`
	Preview     *string    `pg:"preview"`
	Content     *string    `pg:"content"`
	CategoryID  int        `pg:"categoryId,use_zero"`
	CountryID   *int       `pg:"countryId"`
	RegionID    *int       `pg:"regionId"`
	CityID      *int       `pg:"cityId"`
	TagIDs      []int      `pg:"tagIds,array"`
	CreatedAt   time.Time  `pg:"createdAt,use_zero"`
	PublishedAt *time.Time `pg:"publishedAt"`
	StatusID    int        `pg:"statusId,use_zero"`

	Category *Category `pg:"fk:categoryId,rel:has-one"`
	Country  *Country  `pg:"fk:countryId,rel:has-one"`
	Region   *Region   `pg:"fk:regionId,rel:has-one"`
	City     *City     `pg:"fk:cityId,rel:has-one"`
}

type Tag struct {
	tableName struct{} `pg:"tags,alias:t,discard_unknown_columns"`

	ID       int    `pg:"tagId,pk"`
	Title    string `pg:"title,use_zero"`
	StatusID int    `pg:"statusId,use_zero"`
}

type City struct {
	tableName struct{} `pg:"cities,alias:t,discard_unknown_columns"`

	ID          int     `pg:"cityId,pk"`
	RegionID    int     `pg:"regionId,use_zero"`
	CountryID   int     `pg:"countryId,use_zero"`
	Title       string  `pg:"title,use_zero"`
	AltTitle    *string `pg:"altTitle"`
	Alias       string  `pg:"alias,use_zero"`
	OrderNumber int     `pg:"orderNumber,use_zero"`
	StatusID    int     `pg:"statusId,use_zero"`

	Region  *Region  `pg:"fk:regionId,rel:has-one"`
	Country *Country `pg:"fk:countryId,rel:has-one"`
}

type Country struct {
	tableName struct{} `pg:"countries,alias:t,discard_unknown_columns"`

	ID              int     `pg:"countryId,pk"`
	Title           string  `pg:"title,use_zero"`
	AltTitle        *string `pg:"altTitle"`
	Alias           string  `pg:"alias,use_zero"`
	OrderNumber     int     `pg:"orderNumber,use_zero"`
	H1              *string `pg:"h1"`
	PageTitle       *string `pg:"pageTitle"`
	MetaDescription *string `pg:"metaDescription"`
	StatusID        int     `pg:"statusId,use_zero"`
}

type Region struct {
	tableName struct{} `pg:"regions,alias:t,discard_unknown_columns"`

	ID              int     `pg:"regionId,pk"`
	CountryID       int     `pg:"countryId,use_zero"`
	Title           string  `pg:"title,use_zero"`
	AltTitle        *string `pg:"altTitle"`
	Alias           string  `pg:"alias,use_zero"`
	OrderNumber     int     `pg:"orderNumber,use_zero"`
	Image           *string `pg:"image"`
	H1              *string `pg:"h1"`
	PageTitle       *string `pg:"pageTitle"`
	MetaDescription *string `pg:"metaDescription"`
	StatusID        int     `pg:"statusId,use_zero"`

	Country *Country `pg:"fk:countryId,rel:has-one"`
}

type EncryptionKey struct {
	tableName struct{} `pg:"encryptionKeys,alias:t,discard_unknown_columns"`

	ID          uuid.UUID  `pg:"encryptionKeyId,pk,type:uuid"`
	IssuedCount int        `pg:"issuedCount,use_zero"`
	CreatedAt   time.Time  `pg:"createdAt,use_zero"`
	UpdatedAt   *time.Time `pg:"updatedAt"`
	ExpiresAt   time.Time  `pg:"expiresAt,use_zero"`
	StatusID    int        `pg:"statusId,use_zero"`
}

type VfsFile struct {
	tableName struct{} `pg:"vfsFiles,alias:t,discard_unknown_columns"`

	ID         int       `pg:"fileId,pk"`
	FolderID   int       `pg:"folderId,use_zero"`
	Title      string    `pg:"title,use_zero"`
	Path       string    `pg:"path,use_zero"`
	Params     *string   `pg:"params"`
	IsFavorite *bool     `pg:"isFavorite"`
	MimeType   string    `pg:"mimeType,use_zero"`
	FileSize   *int      `pg:"fileSize"`
	FileExists bool      `pg:"fileExists,use_zero"`
	CreatedAt  time.Time `pg:"createdAt,use_zero"`
	StatusID   int       `pg:"statusId,use_zero"`

	Folder *VfsFolder `pg:"fk:folderId,rel:has-one"`
}

type VfsFolder struct {
	tableName struct{} `pg:"vfsFolders,alias:t,discard_unknown_columns"`

	ID             int       `pg:"folderId,pk"`
	ParentFolderID *int      `pg:"parentFolderId"`
	Title          string    `pg:"title,use_zero"`
	IsFavorite     *bool     `pg:"isFavorite"`
	CreatedAt      time.Time `pg:"createdAt,use_zero"`
	StatusID       int       `pg:"statusId,use_zero"`

	ParentFolder *VfsFolder `pg:"fk:parentFolderId,rel:has-one"`
}

type LoginCode struct {
	tableName struct{} `pg:"loginCodes,alias:t,discard_unknown_columns"`

	ID         string    `pg:"state,pk"`
	Code       string    `pg:"code,use_zero"`
	CreatedAt  time.Time `pg:"createdAt,use_zero"`
	SiteUserID int       `pg:"siteUserId,use_zero"`
	Attempts   int       `pg:"attempts,use_zero"`

	SiteUser *SiteUser `pg:"fk:siteUserId,rel:has-one"`
}

type SiteUser struct {
	tableName struct{} `pg:"siteUsers,alias:t,discard_unknown_columns"`

	ID              int        `pg:"siteUserId,pk"`
	StatusID        int        `pg:"statusId,use_zero"`
	Email           string     `pg:"email,use_zero"`
	DefaultRole     string     `pg:"defaultRole,use_zero"`
	Password        *string    `pg:"password"`
	FirstName       *string    `pg:"firstName"`
	LastName        *string    `pg:"lastName"`
	OwnerExternalID *int64     `pg:"ownerExternalId"`
	CreatedAt       time.Time  `pg:"createdAt,use_zero"`
	LastActivityAt  *time.Time `pg:"lastActivityAt"`
}
