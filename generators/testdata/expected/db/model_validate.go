// Code generated by mfd-generator unknown; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"unicode/utf8"
)

const (
	ErrEmptyValue = "empty"
	ErrMaxLength  = "len"
	ErrWrongValue = "value"
)

func (c Category) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(c.Title) > 255 {
		errors[Columns.Category.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (n News) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(n.Title) > 255 {
		errors[Columns.News.Title] = ErrMaxLength
	}

	if n.Preview != nil && utf8.RuneCountInString(*n.Preview) > 255 {
		errors[Columns.News.Preview] = ErrMaxLength
	}

	if n.TagIDs == nil {
		errors[Columns.News.TagIDs] = ErrEmptyValue
	}

	return errors, len(errors) == 0
}

func (t Tag) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(t.Title) > 255 {
		errors[Columns.Tag.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (c City) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(c.Title) > 255 {
		errors[Columns.City.Title] = ErrMaxLength
	}

	if c.AltTitle != nil && utf8.RuneCountInString(*c.AltTitle) > 255 {
		errors[Columns.City.AltTitle] = ErrMaxLength
	}

	if utf8.RuneCountInString(c.Alias) > 255 {
		errors[Columns.City.Alias] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (c Country) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(c.Title) > 255 {
		errors[Columns.Country.Title] = ErrMaxLength
	}

	if c.AltTitle != nil && utf8.RuneCountInString(*c.AltTitle) > 255 {
		errors[Columns.Country.AltTitle] = ErrMaxLength
	}

	if utf8.RuneCountInString(c.Alias) > 255 {
		errors[Columns.Country.Alias] = ErrMaxLength
	}

	if c.H1 != nil && utf8.RuneCountInString(*c.H1) > 500 {
		errors[Columns.Country.H1] = ErrMaxLength
	}

	if c.PageTitle != nil && utf8.RuneCountInString(*c.PageTitle) > 500 {
		errors[Columns.Country.PageTitle] = ErrMaxLength
	}

	if c.MetaDescription != nil && utf8.RuneCountInString(*c.MetaDescription) > 1000 {
		errors[Columns.Country.MetaDescription] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (r Region) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(r.Title) > 255 {
		errors[Columns.Region.Title] = ErrMaxLength
	}

	if r.AltTitle != nil && utf8.RuneCountInString(*r.AltTitle) > 255 {
		errors[Columns.Region.AltTitle] = ErrMaxLength
	}

	if utf8.RuneCountInString(r.Alias) > 255 {
		errors[Columns.Region.Alias] = ErrMaxLength
	}

	if r.Image != nil && utf8.RuneCountInString(*r.Image) > 32 {
		errors[Columns.Region.Image] = ErrMaxLength
	}

	if r.H1 != nil && utf8.RuneCountInString(*r.H1) > 500 {
		errors[Columns.Region.H1] = ErrMaxLength
	}

	if r.PageTitle != nil && utf8.RuneCountInString(*r.PageTitle) > 500 {
		errors[Columns.Region.PageTitle] = ErrMaxLength
	}

	if r.MetaDescription != nil && utf8.RuneCountInString(*r.MetaDescription) > 1000 {
		errors[Columns.Region.MetaDescription] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (vf VfsFile) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(vf.Title) > 255 {
		errors[Columns.VfsFile.Title] = ErrMaxLength
	}

	if utf8.RuneCountInString(vf.Path) > 255 {
		errors[Columns.VfsFile.Path] = ErrMaxLength
	}

	if utf8.RuneCountInString(vf.MimeType) > 255 {
		errors[Columns.VfsFile.MimeType] = ErrMaxLength
	}

	return errors, len(errors) == 0
}

func (vf VfsFolder) Validate() (errors map[string]string, valid bool) {
	errors = map[string]string{}

	if utf8.RuneCountInString(vf.Title) > 255 {
		errors[Columns.VfsFolder.Title] = ErrMaxLength
	}

	return errors, len(errors) == 0
}
